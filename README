FEATURE WORKER
======================

This package offers end to end text analysis: feature extraction, correlation, 
mediation and prediction / classification. Please visit for more 
information

  http://wwbp.org
  http://wiki.wwbp.org

SETUP
=====

 1. Install the required Ubuntu libraries. Feature Worker has been tested on Ubuntu 14.04.
 	WARNING: This will install MySQL on your computer.  

 		xargs apt-get install < requirements.system

 2. Install python dependencies.

    	pip install -r requirements.txt

 3. Load NLTK corpus

    	python -c "import nltk; nltk.download('wordnet')"

 4. Install Stanford parser

 	Download the zip file from http://nlp.stanford.edu/software/lex-parser.shtml. 
 	Extract into ../FeatureWorker/Tools/StanfordParser/. Move 
 	../FeatureWorker/Tools/StanfordParser/oneline.sh into the folder you extracted:
 	../FeatureWorker/Tools/StanfordParser/stanford-parser-full*/.
    
 5. Install Tweet NLP v0.3 (ark-tweet-nlp-0.3)

 	Download the tgz file (for version 0.3) from http://www.cs.cmu.edu/~ark/TweetNLP/.
 	Extract this file into ../FeatureWorker/Tools/TwitterTagger/.

 6. (Optional) Install the IBM Wordcloud jar file. 

 	The default wordcloud module is installed in Step 2 via pip. This can be changed 
 	to the IBM wordcloud module which produces nicer wordclouds. To do this:
 	
 	 a.	You must sign up for a IBM DeveloperWorks account and download
 		ibm-word-cloud.jar. Place this file into ../FeatureWorker/lib/. 

 	 b.	Change line number 108 in ../FeatureWorker/lib/wordcloud.py from
 			wordcloud_algorithm='amueller'
 		to
 		    wordcloud_algorithm='ibm'
 
 7. NOTE: Feature Worker is highly dependent on MySQL. You must have this installed.
 	Any calls to fwInterface.py will open MySQL. With your database any text data 
 	must have two columns:
 		message: text data
 		message_id: unique numeric identifier for each message

EXAMPLE COMMANDS
==============

 1. Feature Extraction

 	Given a message set in the table tweetcollectiondb.messagestable, this extracts 
 	1grams, 2grams and 3grams and places them into a single table

		./fwInterface.py -d tweetcollectiondb -t messagestable -c user_id 
		--add_ngrams -n 1 2 3 --feat_occ_filter --set_p_occ 0.05 --combine_feat_tables 1to3gram

	Given a 1gram feature table feat$1gram$messages_r5k$user_id$16to16, this removes
	all features used in less than 5% of users.

		./fwInterface.py -d tweetcollectiondb -t messagestable -f 'feat$1gram$messages_r5k$user_id$16to16' 
		--feat_occ_filter --set_p_occ 0.05

 2. Correlation

 	Correlate 1grams with age while controlling for gender.

		./fwInterface.py -d tweetcollectiondb -t messagestable -c user_id -f 
		'feat$1gram$messages_r5k$user_id$16to16$0_05' --group_freq_thresh 500 --outcome_table user_data 
		--outcomes age --outcome_controls gender --rmatrix --csv --output_name TEST

CONTACT
=======

Please send bug reports, patches, and other feedback to

  Andy Schwartz (hansens@sas.upenn.edu) or Salvatore Giorgi (sgiorgi@sas.upenn.edu)
